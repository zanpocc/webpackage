<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zanpo.it.dao.database.IDatabaseDao">

    <resultMap id="tableResultMap" type="com.zanpo.it.entity.Table">
        <result column="name" jdbcType="VARCHAR" property="name" />
        <result column="comment" jdbcType="VARCHAR" property="comment"/>
        <association property="primaryKey" javaType="com.zanpo.it.entity.Column">
            <result column="pri_name" jdbcType="VARCHAR" property="name" />
            <result column="pri_type" jdbcType="VARCHAR" property="type"/>
            <result column="pri_data_type" jdbcType="VARCHAR" property="dataType"/>
        </association>
        <collection property="columns" javaType="java.util.ArrayList" ofType="com.zanpo.it.entity.Column">
            <result column="col_name" jdbcType="VARCHAR" property="name" />
            <result column="col_type" jdbcType="VARCHAR" property="type"/>
            <result column="col_comment" jdbcType="VARCHAR" property="comment"/>
            <result column="col_nullAble" jdbcType="VARCHAR" property="nullAble"/>
            <result column="col_data_type" jdbcType="VARCHAR" property="dataType"/>
        </collection>
    </resultMap>

    <select id="findAllTables" resultMap="tableResultMap" parameterType="java.lang.String">
        select
            t.TABLE_NAME as name,
            t.TABLE_COMMENT as comment,
            tmp.COLUMN_NAME as pri_name,
            tmp.COLUMN_TYPE as pri_type,
            tmp.DATA_TYPE as pri_data_type,
            col.COLUMN_TYPE as col_type,
            col.COLUMN_NAME as col_name,
            col.COLUMN_KEY as col_key,
            col.COLUMN_TYPE as col_type,
            col.COLUMN_COMMENT as col_comment,
            col.IS_NULLABLE as col_nullAble,
            col.DATA_TYPE as col_data_type
        from information_schema.`TABLES` t
        left join information_schema.`COLUMNS` col on col.TABLE_NAME = t.TABLE_NAME
        left join information_schema.`KEY_COLUMN_USAGE` kcu on kcu.TABLE_NAME = t.TABLE_NAME
        left join (
            select
                t.TABLE_NAME,
                col.COLUMN_NAME,
                col.COLUMN_TYPE,
                col.DATA_TYPE
            from information_schema.`TABLES` t
            left join information_schema.`COLUMNS` col on col.TABLE_NAME = t.TABLE_NAME
            left join information_schema.`KEY_COLUMN_USAGE` kcu on kcu.TABLE_NAME = t.TABLE_NAME
            where t.TABLE_SCHEMA = #{schema,jdbcType=VARCHAR} and kcu.COLUMN_NAME = col.COLUMN_NAME
        ) tmp on tmp.TABLE_NAME = t.TABLE_NAME
        where t.TABLE_SCHEMA = #{schema,jdbcType=VARCHAR} and kcu.COLUMN_NAME != col.COLUMN_NAME
    </select>

    <select id="findAllSchema" resultType="String">
        SELECT DISTINCT SCHEMA_NAME from information_schema.SCHEMATA ORDER BY SCHEMA_NAME
    </select>
</mapper>